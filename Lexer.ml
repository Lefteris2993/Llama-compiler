# 1 "Lexer.mll"
 
  open Printf

  let create_hashtable size init =
    let tbl = Hashtbl.create size in
    List.iter (fun (key, data) -> Hashtbl.add tbl key data) init;
    tbl

  type token =
    | AND
    | ARRAY
    | BEGIN
    | BOOL
    | CHAR
    | DELETE
    | DIM
    | DO 
    | DONE
    | DOWNTO
    | ELSE
    | END
    | FALSE
    | FLOAT
    | FOR
    | IF
    | IN
    | INT
    | LET
    | MATCH
    | MOD
    | MUTABLE
    | NEW
    | NOT
    | OF 
    | REC
    | REF
    | THEN
    | TO
    | TRUE
    | TYPE
    | UNIT
    | WHILE
    | WITH
    | ARROW
    | ASSIGN
    | VERTICAL_LINE
    | PLUS
    | MINUS
    | STAR
    | SLASH
    | PLUS_DOT
    | MINUS_DOT
    | STAR_DOT
    | SLASH_DOT
    | DOUBLE_STAR
    | EXCLAMATION_MARK
    | SEMI_COLON
    | DOUBLE_AMPERSAND
    | DOUBLE_VERTICAL_LINE
    | DIFF
    | LESS
    | GREATER
    | LESS_EQUAL
    | GREATER_EQUAL
    | EQUAL
    | NOT_EQUAL
    | SET
    | PAR_OPEN
    | PAR_CLOSE
    | BRACKET_OPEN
    | BRACKET_CLOSE
    | COLON
    | COMMA
    | NUMBER of int
    | STRING of string
    | ID of string
    | EOF

  let keyword_table = 
    create_hashtable 35 [
      ("and", AND);
      ("array", ARRAY);
      ("begin", BEGIN);
      ("bool", BOOL);
      ("char", CHAR);
      ("delete", DELETE);
      ("dim", DIM);
      ("do", DO);
      ("done", DONE);
      ("downto", DOWNTO);
      ("else", ELSE);
      ("end", END);
      ("false", FALSE);
      ("float", FLOAT);
      ("for", FOR);
      ("if", IF);
      ("in", IN);
      ("int", INT);
      ("let", LET);
      ("match", MATCH);
      ("mod", MOD);
      ("mutable", MUTABLE);
      ("new", NEW);
      ("not", NOT);
      ("of", OF);
      ("rec", REC);
      ("ref", REF);
      ("then", THEN);
      ("to", TO);
      ("true", TRUE);
      ("type", TYPE);
      ("unit", UNIT);
      ("while", WHILE);
      ("with", WITH);
    ]

  let operators_table =
    create_hashtable 23 [
      ("->", ARROW);
      ("=", ASSIGN);
      ("|", VERTICAL_LINE);
      ("+", PLUS);
      ("-", MINUS);
      ("*", STAR);
      ("/", SLASH);
      ("+.", PLUS_DOT);
      ("-.", MINUS_DOT);
      ("*.", STAR_DOT);
      ("/.", SLASH_DOT);
      ("**", DOUBLE_STAR);
      ("!", EXCLAMATION_MARK);
      (";", SEMI_COLON);
      ("&&", DOUBLE_AMPERSAND);
      ("||", DOUBLE_VERTICAL_LINE);
      ("<>", DIFF);
      ("<", LESS);
      (">", GREATER);
      ("<=", LESS_EQUAL);
      (">=", GREATER_EQUAL);
      ("==", EQUAL);
      ("!=", NOT_EQUAL);
      (":=", SET);
    ]

    let separators_table =
    create_hashtable 6 [
      ('(', PAR_OPEN);
      (')', PAR_CLOSE);
      ('[', BRACKET_OPEN);
      (']', BRACKET_CLOSE);
      (':', COLON);
      (',', COMMA)
    ]

# 157 "Lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\246\255\247\255\003\000\005\000\251\255\002\000\003\000\
    \033\000\008\000\252\255\031\000\050\000\081\000\079\000\002\000\
    \067\000\084\000\083\000\049\000\196\000\159\000\254\255\207\000\
    \184\000\103\000\253\255\001\000\134\000\251\255\252\255\253\255\
    \102\000\103\000\255\255\254\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\007\000\006\000\255\255\004\000\003\000\
    \003\000\008\000\255\255\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\002\000\008\000\008\000\000\000\255\255\255\255\
    \255\255\255\255\255\255\005\000\255\255\255\255\255\255\255\255\
    \003\000\003\000\255\255\255\255";
  Lexing.lex_default =
   "\002\000\000\000\000\000\255\255\255\255\000\000\255\255\255\255\
    \255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\023\000\255\255\000\000\023\000\
    \255\255\255\255\000\000\027\000\030\000\000\000\000\000\000\000\
    \255\255\255\255\000\000\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\003\000\004\000\255\255\003\000\003\000\003\000\003\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \003\000\011\000\020\000\003\000\000\000\003\000\009\000\019\000\
    \005\000\005\000\013\000\014\000\005\000\017\000\010\000\012\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\006\000\010\000\008\000\016\000\007\000\010\000\
    \010\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\005\000\010\000\005\000\010\000\010\000\
    \010\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\010\000\015\000\010\000\010\000\010\000\
    \010\000\027\000\010\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\024\000\026\000\035\000\
    \031\000\034\000\010\000\000\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\033\000\000\000\
    \032\000\000\000\018\000\000\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\255\255\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\255\255\025\000\000\000\000\000\000\000\000\000\025\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\022\000\000\000\
    \025\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\022\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \001\000\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\025\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\025\000\000\000\
    \000\000\000\000\025\000\000\000\025\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\029\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\
    ";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\027\000\003\000\003\000\004\000\004\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\003\000\255\255\004\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\009\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\000\
    \007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\011\000\000\000\008\000\008\000\
    \012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\013\000\000\000\014\000\015\000\013\000\
    \016\000\017\000\017\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\019\000\025\000\032\000\
    \028\000\033\000\017\000\255\255\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\028\000\255\255\
    \028\000\255\255\018\000\255\255\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\020\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\023\000\024\000\255\255\255\255\255\255\255\255\024\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\020\000\255\255\
    \024\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\023\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\027\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\024\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\024\000\255\255\
    \255\255\255\255\024\000\255\255\024\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\028\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\020\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\023\000\
    ";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec lexer lexbuf =
   __ocaml_lex_lexer_rec lexbuf 0
and __ocaml_lex_lexer_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 161 "Lexer.mll"
              inum
# 319 "Lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 162 "Lexer.mll"
    (
      printf "integer: %s\n" inum;
      NUMBER (int_of_string inum)
    )
# 326 "Lexer.ml"

  | 1 ->
let
# 166 "Lexer.mll"
                             str
# 332 "Lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 167 "Lexer.mll"
    ( 
      let str = String.sub str 1 ((String.length str )- 2) in 
      let str = Scanf.unescaped (str) in
      printf "string: %s\n" str;
      STRING (str)
    )
# 341 "Lexer.ml"

  | 2 ->
let
# 174 "Lexer.mll"
          word
# 347 "Lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 175 "Lexer.mll"
    (
      try
        let token = Hashtbl.find keyword_table word in
        printf "keyword: %s\n" word;
        token
      with Not_found ->
        printf "identifier: %s\n" word;
        ID word
    )
# 359 "Lexer.ml"

  | 3 ->
let
# 184 "Lexer.mll"
                                                                                                                                                                   op
# 365 "Lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 185 "Lexer.mll"
    (
      printf "operator: %s\n" op;
      let token = Hashtbl.find operators_table op in
      token
    )
# 373 "Lexer.ml"

  | 4 ->
let
# 190 "Lexer.mll"
                                         sep
# 379 "Lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 191 "Lexer.mll"
    (
      printf "separator: %c\n" sep;
      let token = Hashtbl.find separators_table sep in
      token
    )
# 387 "Lexer.ml"

  | 5 ->
# 197 "Lexer.mll"
    (
      (* Ignore comments *)
      lexer lexbuf
    )
# 395 "Lexer.ml"

  | 6 ->
# 202 "Lexer.mll"
    (
      (* Ignore end of line *)
      lexer lexbuf
    )
# 403 "Lexer.ml"

  | 7 ->
let
# 206 "Lexer.mll"
              ws
# 409 "Lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 207 "Lexer.mll"
    (
      (* Ignore white spaces, tabs and return characters *)
      lexer lexbuf
    )
# 416 "Lexer.ml"

  | 8 ->
let
# 211 "Lexer.mll"
         c
# 422 "Lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 212 "Lexer.mll"
    ( 
      printf "Unrecognized character: %c\n" c;
      CHAR
    )
# 429 "Lexer.ml"

  | 9 ->
# 217 "Lexer.mll"
    (
      raise End_of_file
    )
# 436 "Lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_lexer_rec lexbuf __ocaml_lex_state

and comments level lexbuf =
   __ocaml_lex_comments_rec level lexbuf 28
and __ocaml_lex_comments_rec level lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 223 "Lexer.mll"
    (
      if level = 0 then lexer lexbuf
      else comments (level - 1) lexbuf
    )
# 451 "Lexer.ml"

  | 1 ->
# 228 "Lexer.mll"
    (
      comments (level + 1) lexbuf
    )
# 458 "Lexer.ml"

  | 2 ->
# 232 "Lexer.mll"
    (
      comments level lexbuf
    )
# 465 "Lexer.ml"

  | 3 ->
# 236 "Lexer.mll"
    (
      comments level lexbuf
    )
# 472 "Lexer.ml"

  | 4 ->
# 240 "Lexer.mll"
    (
      printf "Unexpected EOF";
      raise End_of_file
    )
# 480 "Lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comments_rec level lexbuf __ocaml_lex_state

;;

# 245 "Lexer.mll"
 
  let rec parse lexbuf = 
    let token = lexer lexbuf in 
    parse lexbuf
  
  let main () = 
    let cin = 
      if Array.length Sys.argv > 1
      then open_in Sys.argv.(1)
      else stdin
    in
    let lexbuf = Lexing.from_channel cin in 
    try parse lexbuf
    with End_of_file -> ()

  let _ = Printexc.print main ()

# 505 "Lexer.ml"
